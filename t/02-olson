use Test;
use Olson-TZ;

plan 17;

my Olson-TZ $tz .= new;
is($tz.abbreviation(), 'UTC', 'default to UTC - abbr');
is($tz.utc-offset-in-seconds(0), 0, 'default to UTC - offset');
is(~$tz, 'UTC', 'stringification works');
is(+$tz, 0, 'numification works');

# fixtures
constant dt = -5 * 60 * 60;
constant name = 'America/New_York';
constant tz = 'EST';
my DateTime $new-years  .= new('2014-01-01T12:00:00');
my DateTime $lammas-day .= new('2015-08-01T12:00:00');

$tz = Olson-TZ.new(name => name);
is($tz.name, name, 'name');
for ('winter', $new-years, tz, dt),
    ('summer', $lammas-day, tz.subst('S', 'D'), dt + 60 * 60)
    -> $when, $t, $abbr, $dt {
    is($tz.abbreviation($t), $abbr, "$when time abbreviation - DateTime");
    is($tz.abbreviation($t.later(seconds => 0.1)), $abbr, "$when time abbreviation - DateTime with sub-seconds");
    is($tz.abbreviation($t.posix), $abbr, "$when time abbreviation - DateTime.posix()");
    is($tz.utc-offset-in-seconds($t), $dt, "$when time UTC offset - DateTime.posix()");
    is($tz.abbreviation($t.later(seconds => 0.1)), $abbr, "$when time abbreviation - DateTime with sub-seconds");
    is($tz.utc-offset-in-seconds($t.posix), $dt, "$when time UTC offset - DateTime.posix()");
}

if $*KERNEL.name eq 'win32' {
    skip "don't know how to learn local timezone on windows", 2;
} else {
    %*ENV<TZ> = name;
    my $tznow = qx/date +%Z/.chop;
    my $dt = do given $tznow {
	when 'EST' { dt }
	when 'EDT' { dt + 60 * 60 }
	default	   { "don't know current timezone offset for {name}" }
    }
    if $dt ~~ Str {
	skip "$dt - $tznow", 2;
    } else {
	is($tz.abbreviation(), $tznow, 'US/Eastern current abbr');
	is($tz.utc-offset-in-seconds(time), $dt, 'US/Eastern current offset');
    }
}
